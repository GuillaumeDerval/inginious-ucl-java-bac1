#! /bin/python
# -*- coding: utf-8 -*-

#   Copyright (c) 2016 François Michel, Clémentine Munyabarenzi
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU Affero General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU Affero General Public License for more details.
#
#   You should have received a copy of the GNU Affero General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.




#	@author: François MICHEL


# Ce script est un template pour lancer les exercices sur INGINIOUS.
# Ce script va compiler et exécuter les fichiers suivants :
# {EXERCICE}.java, 
# {EXERCICE}Vide.java
# {EXERCICE}Stu.java (qui sera créé par ce script) 
# et optionnellement {EXERCICE}Corr.java
# Ce script va parser le fichier {EXERCICE}Vide.java pour insérer la réponse de l'étudiant
# à l'intérieur et mettre le tout dans un fichier nommé {EXERCICE}Stu.java
# Il est important de bien respecter les noms des fichiers !

# Le fichier {EXERCICE}.java contiendra la main qui lancera les tests. Losque les tests ont réussi, la main se termine avec System.exit(127). Lorsqu'un problème survient, la main se termine avec une autre valeur que 127.

# Le fichier {EXERCICE}Vide.java contient un template java avec le code à compléter par l'étudiant.

# Le fichier {EXERCICE}Corr.java est un fichier java optionnel, sensé contenir une résolution correcte de l'exercice dans le cas où il serait utile de comparer les réponses renvoyées par le code de l'étudiant avec celles renvoyées par la fonction correcte, pour le feedback.

# Le fichiers custom.sh est un fichier optionnel, qui contient un script sh pour par exemple procéder à des vérifications dans le code (comme détecter l'utilisation de Math.pow à un endroit on on ne pourrait pas l'utiliser). Ce script doit renvoyer 0 (avec echo, par exemple), lorsque l'exécution du script s'est bien déroulée. Il doit renvoyer une autre valeur quand un probème est survenu (par exemple, on a détecté l'utilisation de Math.pow alors que c'est interdit). Lorsqu'un problème est survenu, le script doit retourner un feedback négatif pour la question en cours ainsi qu'un feedback négatif pour la tâche. Lorsqu'une erreur est survenue dans custom.sh, ce script-ci arrêtera automatiquement sa propre exécution directement avec exit, une fois custom.sh terminé.

# Pour utiliser ce script pour corriger plusieurs exercices en une seule tâche, il faut respecter des conventions. Tout d'abord, le premier exercice doit s'appeler q1, le second doit s'appeler q2, le ième doit s'appeler qi.
# Pour pourvoir faire un feedback spécialisé par exercice de la tâche, il faut impérativement que les erreurs (lorsque le code n'est pas correct) soient afficheées sur System.err avec comme première ligne une ligne qui comprend "Question i :" (pour le ième exercice). Par exemple :


# Sur System.err : 
# in testMethode : Question 1 : 
# la réponse obtenue n'est pas correcte
# in testMethode2 : Question 1 :
# la réponse obtenue vaut null mais ce ne devrait pas être le cas
# in testMethodeEx2 : Question 2 :
# assertequals : la réponse devrait valoir 3
# Question 2 : 
# une ArrayIndexOutOfBounds s'est lancée

# ... etc

# L'ordre des labels "Question i :" n'a pas d'importance, les messages peuvent être désordonnés et s'entremêler par question.
# La ligne qui contient le label "Question i : " sera supprimée dans le feedback

# Pour utiliser ce template sur une de vos tâches, les variables à modifier sont :
# EXERCICE, qui contient l'identifiant de l'exercice. Cet identifiant doit se retrouver dans les noms de fichiers java comme indiqué ci-dessus.
# CORR, qui vaudra 0 lorsqu'il n'y a pas de fichier {EXERCICE}Corr.java à compiler. (Attention, mettre CORR à une autre valeur que 0 alors qu'il n'y a pas de fichier {EXERCICE}Corr.java provoquera une erreur de compilation.
# EXECCUSTOM, qui vaudra 0 lorsqu'il n'y a pas de script custom.sh à exécuter et une autre valeur quand il faut en exécuter un.
# NEXERCICES, qui indique le nombre d'exercices que comprend la tâche. Laisser à 1 s'il n'y a qu'un exercice dans la tâche (le cas idéal)

# Pour le reste du script, il n'y a rien à modifier sauf peut-être pour certains cas précis.


import subprocess 
import shlex
import sys
import re
from inginious import feedback

EXERCICE = "M9Q3"
CUSTOMSCRIPT="custom.sh"
CORR=0

# EXECCUSTOM vaut 0 si on n'exécute pas de script "custom" pour faire des vérifications supplémentaires
EXECCUSTOM=0
NEXERCICES=1
CODELITTERAL=".. code-block:: java\n\n"
JAVAC="javac -cp .:/usr/share/java/junit.jar:/usr/share/java/hamcrest-core.jar"
JAVA="run_student --time 20 java -ea -cp .:./student:/usr/share/java/junit.jar:/usr/share/java/hamcrest-core.jar"

JAVAC_ARGS = shlex.split(JAVAC)
JAVA_ARGS = shlex.split(JAVA)

subprocess.call(['parsetemplate', '-o', 'student/' + EXERCICE + 'Stu.java', 'student/' + EXERCICE + 'Vide.java'], universal_newlines=True)

OUTCUSTOM=0
if EXECCUSTOM != 0:
	OUTCUSTOM=subprocess.call(['sh', CUSTOMSCRIPT], universal_newlines=True)

if OUTCUSTOM != 0:
	exit()

with open('logOther.out', 'w') as f:
	subprocess.call(JAVAC_ARGS + ['student/' + EXERCICE + '.java'], universal_newlines=True, stderr=f)

with open('log.out', 'w') as f:
	subprocess.call(JAVAC_ARGS + ['student/' + EXERCICE + '.java'], universal_newlines=True, stderr=f)


LOG = open('log.out')

OUTPUT = LOG.read()

LOG.close()

OUTCORR = ""
if CORR != 0:
    PROC = subprocess.Popen(JAVAC_ARGS + ['student/' + EXERCICE + 'Corr.java'], stdout=subprocess.PIPE, universal_newlines=True)
    OUTCORR = PROC.stdout.read()
    PROC.communicate()

with open('logOther.out', 'r') as f:
	OUTOTHER = f.read()

ERREURENSEIGNANT=0
MESSAGEENSEIGNANT=""
if OUTCORR != "":
    # feedback n'aime pas les "\n", donc on contourne le probleme en l'écrivant dans un fichier puis en le lisant.
    # sed permet d'indenter chaque ligne de son input avec une tabulation
    with open('in', 'w+') as f:
        f.write(OUTCORR)
        f.flush()
        PROC = subprocess.Popen(['sed', '-e', 's/^/\t/'], universal_newlines=True, stdin=f, stdout=subprocess.PIPE)
        OUTCORR = PROC.stdout.read()
        PROC.communicate()
    ERREURENSEIGNANT = 1
    MESSAGEENSEIGNANT = OUTCORR

if OUTOTHER != "":
	# feedback n'aime pas les "\n", donc on contourne le probleme en l'écrivant dans un fichier puis en le lisant.
    # sed permet d'indenter chaque ligne de son input avec une tabulation
    with open('in', 'w+') as f:
        f.write(OUTOTHER)
        f.flush()
        f.seek(0)
        PROC = subprocess.Popen(['sed', '-e', 's/^/\t/'], universal_newlines=True, stdin=f, stdout=subprocess.PIPE)
        out1 = PROC.stdout
        PROC2 = subprocess.Popen(['sed', 's/%/%%/g'], universal_newlines=True, stdin=out1, stdout=subprocess.PIPE)
        OUTOTHER = PROC2.stdout.read()
        PROC.communicate()
        PROC2.communicate()
    ERREURENSEIGNANT = 1
    MESSAGEENSEIGNANT = MESSAGEENSEIGNANT + "\n" + OUTOTHER
	
if ERREURENSEIGNANT != 0:
    with open('outenseignant.out', 'w+') as f:
        f.write("Le programme ne compile pas: \n " + CODELITTERAL + MESSAGEENSEIGNANT + "\n")
        f.flush()
        f.seek(0)
        feedback.set_result('failed')
        feedback.set_global_feedback(f.read())
    sys.exit(0)
	
ERREUR=0
# Si le fichier est vide et qu'il n'y a donc pas d'erreur de compilation
if OUTPUT == "":
    with open('err.txt', 'w+') as f:
        # On lance l'exercice 1
        RESPROC = subprocess.Popen(JAVA_ARGS + ['student/' + EXERCICE], universal_newlines=True, stderr=f, stdout=subprocess.PIPE)
        OUTPUT = RESPROC.stdout.read()
        RESPROC.communicate()
        RESULTAT = RESPROC.returncode
        print("RES="+str(RESULTAT))
        f.flush()
        f.seek(0)
        OUTERR = f.read()
    # S'il y a des erreurs dans l'exécution du programme (écrites sur stderr)
    if RESULTAT == 127:
        if NEXERCICES == 1:
			feedback.set_result('success')
			feedback.set_problem_feedback("Bravo, votre code est correct !", "q1")
        else:
			j=1
			while j <= NEXERCICES:
				# On fait un feedback positif par question
				feedback.set_result('success')
				feedback.set_problem_feedback("Bravo, votre code est correct !", "q"+str(j))
				#subprocess.call(['feedback', '-i', 'q' + j, '-r', 'success', '-f', "Vous avez bien répondu à cette question"])
				j = j + 1
    elif RESULTAT == 252:
        feedback.set_result('failed')
        feedback.set_global_feedback("La limite de mémoire de votre programme est dépassée")
        sys.exit(0)
    elif RESULTAT == 253:
        feedback.set_result('timeout')
        feedback.set_global_feedback("La limite de temps d'exécution de votre programme est dépassée")
        #subprocess.call(['feedback', '-r', 'timeout', '-f', "La limite de temps d'exécution de votre programme est dépassée"])
        exit()
    else:
		# Sinon c'est que les tests ont échoué, le programme possède des erreurs.
        if NEXERCICES == 1:
            # feedback n'aime pas les "\n", donc on contourne le probleme en l'écrivant dans un fichier puis en le lisant.
            with open('outerrfb.err', 'w+') as f:
                f.write(OUTERR)
                f.flush()
                f.seek(0)
                print('outerr = "' + OUTERR + '"')
                with open('temp1ex.out', 'w+') as f2:
                    subprocess.call(['sed', '-e', 's/^/\t/'], stdout=f2, universal_newlines=True, stdin=f)
                    f2.seek(0)
                    print('test:"' + f2.read() + '"')
                    f2.seek(0)
                    PROC = subprocess.Popen(['sed', 's/%/%%/g'], stdout=subprocess.PIPE, stdin=f2, universal_newlines=True)
                    OUTERR = PROC.stdout.read()
                    PROC.communicate()
            with open('feedback1ex.out', 'w+') as f:
                f.write("Il semb que vous ayiez fait des erreurs dans votre code...\n " + CODELITTERAL + OUTERR + "\n")
                f.flush()
                f.seek(0)
                feed = f.read()
                feedback.set_result('failed')
                feedback.set_problem_feedback(feed, "q1")
                ERREUR=1
        else:
            i=1
            while i <= NEXERCICES:
                # On récupère un feedback par question dans le System.err, en suivant le format imposé par convention
                with open('outerrnex.out', 'w+') as f:
                    f.write(OUTERR)
                    f.flush()
                    f.seek(0)
                    with open('question.out', 'w+') as f2:
                        PROC = subprocess.Popen(['sed', '-e', "/Question " + str(i) + " :/,/Question [^\D1] :/!d"], universal_newlines=True, stdout=f2, stdin=f)
                        PROC.communicate()
                        f2.seek(0)
                        p = re.compile("Question [0-9] :")
                        OUTERRPARQUESTION = p.sub('', f2.read())
                if OUTERRPARQUESTION == "":
                    feedback.set_result('success')
                    feedback.set_problem_feedback("Vous avez bien répondu à cette question", "q" + str(i))
                else:
                    with open('outerrparq.out', 'w+') as f:
                        f.write(OUTERRPARQUESTION)
                        f.seek(0)
                        PROC = subprocess.Popen(['sed', '-e', 's/^/\t/'], stdin=f, stdout=subprocess.PIPE, universal_newlines=True)
                        outsed1 = PROC.stdout
                        PROC2 = subprocess.Popen(['sed', 's/%/%%/g'], stdin=outsed1, stdout=subprocess.PIPE, universal_newlines=True)
                        OUTERRPARQUESTION = PROC2.stdout.read()
                        PROC.communicate()
                        PROC2.communicate()
                        feed = "Il semble que vous ayiez fait des erreurs dans votre code...\n " + CODELITTERAL + OUTERRPARQUESTION + "\n"
                        feedback.set_result('failed')
                        feedback.set_problem_feedback(feed, "q" + str(i))
                i = i+1
            ERREUR=1

	# On vérifie si la tâche s'est bien déroulée ou s'il y a eu un souci, et on fait un feedback de la tâche complète
    if ERREUR == 0:
		feedback.set_result('success')
		feedback.set_global_feedback("Bravo, votre code est correct !")
    else:
		feedback.set_result('failed')
		feedback.set_global_feedback("Vous n'avez pas réussi tous les exercices")
	
else:
    # feedback n'aime pas les "\n", donc on contourne le probleme en l'écrivant dans un fichier puis en le lisant.
    # sed permet d'indenter chaque ligne de son input avec une tabulation
    with open('outputglobal.out', 'w+') as f:
        f.write(OUTPUT)
        f.seek(0)
        PROC = subprocess.Popen(['sed', '-e', 's/^/\t/'], stdin=f, stdout=subprocess.PIPE, universal_newlines=True)
        outsed1 = PROC.stdout
        PROC2 = subprocess.Popen(['sed', 's/%/%%/g'], stdin=outsed1, stdout=subprocess.PIPE, universal_newlines=True)
        OUTPUT = PROC2.stdout.read()
        PROC.communicate()
        PROC2.communicate()
        feed = "Votre programme ne compile pas: \n " + CODELITTERAL + OUTPUT + "\n"
        feedback.set_result('failed')
        feedback.set_global_feedback(feed)